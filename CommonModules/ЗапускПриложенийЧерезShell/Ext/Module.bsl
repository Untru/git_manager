#Область ПрограммныйИнтерфейс

Процедура ЗапускПриложения(КомандаЗапуска, ТекущийКаталог, Адрес) Экспорт
	
	ЭкземплярФоновогоЗадания = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	СтрокаКоманды = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска);
	ЗаписьЖурналаРегистрации("GIT",,,, СтрокаКоманды);
	ТаймаутВыполненияКомандыСек = 60;
	
	ВременныйФайлСкрипта = ПолучитьИмяВременногоФайла("bat");
	ЗаписьТекстаСкрипта = Новый ТекстовыйДокумент;
	ЗаписьТекстаСкрипта.УстановитьТекст(СтрокаКоманды);
	ЗаписьТекстаСкрипта.Записать(ВременныйФайлСкрипта, "cp866");		
	
	КомандаЗавершенаПоТаймауту = Ложь;
	ВыводИнформация = "";
	ВыводОшибки = "";

	ТекстСкриптаДляВыполнения = ВременныйФайлСкрипта;
	НачалоВыполненияКоманды = ТекущаяДата();
	ЗавершениеВыполненияКоманды = НачалоВыполненияКоманды + ТаймаутВыполненияКомандыСек;
	
	Попытка		
		objShell = Новый COMОбъект("WScript.Shell");
	Исключение		
		Ошибка = "Не удалось инициализировать WScript.Shell.
		|Подробнее:
		|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
		
		ВызватьИсключение Ошибка;
				
	КонецПопытки;
	objShell.CurrentDirectory = ТекущийКаталог;
	
	objWshScriptExec = objShell.Exec(ТекстСкриптаДляВыполнения);
	objStdOut = objWshScriptExec.StdOut;
	objStdErr = objWshScriptExec.StdErr;
	
	ВыводИнформация = СтрокаКоманды;
	Номер = 1;
	Если НЕ КомандаЗавершенаПоТаймауту Тогда	
		Пока Не objWshScriptExec.Status = 1 Цикл		
			Пока Не objStdOut.AtEndOfStream Цикл			
				Номер = Номер + 1;

				//Информация
				strLine = objStdOut.ReadLine();
				strLine = ПреобразоватьКодировку(strLine);
				ВыводИнформация = ВыводИнформация 
				+ strLine 
				+ Символы.ВК 
				+ Символы.ПС;
				
				Если ЭкземплярФоновогоЗадания <> Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ВыводИнформация;
					Сообщение.Сообщить();
				КонецЕсли;
				
				Если ЗавершениеВыполненияКоманды <= ТекущаяДата() Тогда				
					КомандаЗавершенаПоТаймауту = Истина;
					Прервать;				
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;				
			
		КонецЦикла; 		
	КонецЕсли;
	
	// "Насильно" завершаем процесс по завершению работы
	// и "уничтожаем" COM-объект
	Попытка		
		objWshScriptExec.Terminate();
		objWshScriptExec = Неопределено;
		
		ЗаписьЖурналаРегистрации("GIT",,,, "Работа ");

	Исключение		
		objWshScriptExec = Неопределено;
		ЗаписьЖурналаРегистрации("GIT",,,, "Попали в исключение");

	КонецПопытки;	
	objShell = Неопределено;
	Если КомандаЗавершенаПоТаймауту Тогда
		ВыводОшибки	= "Внимание! Выполнение остановлено по истечении времени ожидания.";
	КонецЕсли;
	
	Если ЭкземплярФоновогоЗадания <> Неопределено Тогда
	 	Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ВыводИнформация;
		Сообщение.Сообщить();
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(
		Новый Структура("ВыводИнформация, ВыводОшибки, ЗапускЗавершен",
		ВыводИнформация, ВыводОшибки, Истина),
		Адрес);
		
	УдалитьФайлЕслиВозможно(ВременныйФайлСкрипта);
	
КонецПроцедуры

Функция РазвернутыйВывод(ТекстВывода) Экспорт
	
	Строки = СтрРазделить(ТекстВывода, Символы.ПС, Ложь);
	ОбратныйВыводТекста = Новый Массив;
	
	Для каждого Строка из Строки Цикл
		Если ОбратныйВыводТекста.Количество() И ОбратныйВыводТекста.Получить(0) = Строка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбратныйВыводТекста.Вставить(0, Строка);
	КонецЦикла;
	
	Возврат СтрСоединить(ОбратныйВыводТекста,Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьКодировку(Текст, ИсходнаяКодировка = "windows-1251", НоваяКодировка = "cp866")
	
	ВременныйФайлИсходный = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекстаИсходный = Новый ТекстовыйДокумент;
	ЗаписьТекстаИсходный.УстановитьТекст(Текст);
	ЗаписьТекстаИсходный.Записать(ВременныйФайлИсходный, ИсходнаяКодировка);
	
	ЧтениеТекстаНовый = Новый ТекстовыйДокумент;
	ЧтениеТекстаНовый.Прочитать(ВременныйФайлИсходный, НоваяКодировка); 
	КонвертированныйТекст = ЧтениеТекстаНовый.ПолучитьТекст();
	
	УдалитьФайлЕслиВозможно(ВременныйФайлИсходный);
	
	Возврат КонвертированныйТекст;	
	
КонецФункции

Функция УдалитьФайлЕслиВозможно(ПутьКФайлу)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Попытка
		
		УдалитьФайлы(ПутьКФайлу);
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
		
КонецФункции

Функция ПодменыВыводаЛога()

	Результат = Новый Соответствие;
	Результат.Вставить("pull", "Получаем изменения репозитория");
	Результат.Вставить("session list", "Получаем список сеансов в базе");
	Результат.Вставить("connection list", "Получаем список соединений в базе");
	Результат.Вставить("infobase config export", "Экспортируем конфигурацию из базы в файлы");
	Результат.Вставить("-sessions-deny=on", "Блокировка базы"); 
	Результат.Вставить("--version", "Получение версии 1с");
	Результат.Вставить("infobase summary list", "Получение списка баз кластера");
	Результат.Вставить("cluster list", "Получение информации о кластере");
	Результат.Вставить(" add ", "Добавление изменений к фиксации");
	Результат.Вставить(" push ", "Отправка изменений на сервер");
	Результат.Вставить(" branch  ", "Создание ветки");
	Результат.Вставить(" checkout  ", "Переход на ветку");
	Результат.Вставить(" infobase config import ", "Загрузка конфигурации в базу");
	Результат.Вставить(" infobase config apply  ", "Применение изменений в базе");	
	
	Возврат Результат;
КонецФункции
#КонецОбласти
