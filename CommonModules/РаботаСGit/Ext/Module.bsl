#Область ПрограммныйИнтерфейс

// Функция - Путь к серверу git
//
// Параметры:
//  АдресСервера - 	 - 
//  Проект		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьКСерверуGit(Знач АдресСервера, Знач ВладелецПроекта) Экспорт
	
	АдресСервера = СтрЗаменить(АдресСервера, 
		"%username%", Пользователи.ТекущийПользователь().ИмяПользователяGit);
	АдресСервера = СтрЗаменить(АдресСервера,
		"%password%", Пользователи.ТекущийПользователь().ПарольПользователяGit);
	АдресСервера = СтрЗаменить(АдресСервера,
		"%owner%", ВладелецПроекта.ИмяПользователяGit);
	
	Возврат АдресСервера;
	
КонецФункции

// Функция - Json в структуру
//
// Параметры:
//  ТекстJson	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция JsonВСоответсвие(Знач ТекстJson, Знач ИменаСвойствСоЗначениямиДата = Неопределено) Экспорт
	
	ЧтениеJSOn = Новый ЧтениеJSON;
	ЧтениеJSOn.УстановитьСтроку(ТекстJson);
	Возврат ПрочитатьJSON(ЧтениеJSOn, Истина, ИменаСвойствСоЗначениямиДата);
	
КонецФункции

// Функция - Получить имя сервера из строки URL
//
// Параметры:
//  АдресWebGitLab	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьИмяСервераИзСтрокиURL(Знач АдресWebGitLab) Экспорт
	
	//АдресWebGitLab = Константы.АдресWebGitLab.Получить();
	АдресWebGitLab = СтрЗаменить(АдресWebGitLab, "http://", "");
	АдресWebGitLab = СтрЗаменить(АдресWebGitLab, "https://", "");
	АдресWebGitLab = СтрЗаменить(АдресWebGitLab, "/", "");

	Возврат АдресWebGitLab;
	
КонецФункции

// Функция - Имя файла без расширения
//
// Параметры:
//  ИмяФайла - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ИмяФайлаБезРасширения(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ИмяБезРасширения;
	
КонецФункции 

// Функция - Путь к каталогу репозитория
//
// Параметры:
//  ИмяПроектаНаGitLab	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьККаталогуРепозитория(Знач ИмяПроектаНаGitLab) Экспорт
	
	Возврат СтрШаблон("%1\%2",
			Константы.ПутьКПапкеСРепозиториями.Получить(), 
			ИмяПроектаНаGitLab)
	
КонецФункции
		
// Функция - Корректное имя репозитория
//
// Параметры:
//  ИмяРепозитория	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КорректноеИмяРепозитория(Знач ИмяРепозитория) Экспорт
	
	RegExp = Новый COMОбъект("VBScript.RegExp");// создаем объект для работы с регулярными выражениями
	RegExp.MultiLine = Истина;  // истина — текст многострочный, ложь — одна строка
	RegExp.Global = Истина;     // истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске
	RegExp.Pattern = "[А-Яа-я]+";
	
	Возврат Не RegExp.Test(ИмяРепозитория);
	
КонецФункции

// Функция - Путь к каталогу репозитория ветки разработки проектов EPF
//
// Параметры:
//  ВеткаРазработкиПроектовEPF	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьККаталогуРепозиторияВеткиРазработкиПроектовEPF(Знач ВеткаРазработкиПроектовEPF) Экспорт
	
	Возврат СтрШаблон("%1\%2\%3", 
		Константы.ПутьКПапкеСРепозиториямиВетокРазработки.Получить(),
		ИмяФайлаБезРасширения(ВеткаРазработкиПроектовEPF.Владелец.ИмяФайла),
		ВеткаРазработкиПроектовEPF.Код);
	
КонецФункции

// Функция - Данные версий ветки разработки
//
// Параметры:
//  ВеткаПроекта		 - 	 - 
//  КоличествоЗаписей	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ДанныеВерсийВеткиРазработки(Знач ВеткаПроекта, Знач КоличествоЗаписей = 10) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bat");
	ИмяВременногоФайлаLog = ПолучитьИмяВременногоФайла("log");
	ЗаписьТекса = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.OEM);
	ЗаписьТекса.Записать(СтрШаблон("git log -n %2 > %1", ИмяВременногоФайлаLog, КоличествоЗаписей));
	ЗаписьТекса.Закрыть();
	ЗаписьТекса = Неопределено;
	
	ЗапуститьПриложение(ИмяВременногоФайла,
		РаботаСGit.ПутьККаталогуРепозиторияВеткиРазработкиПроектовEPF(ВеткаПроекта), Истина);
		
	ДанныеКВозврату = "";
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайлаLog, КодировкаТекста.UTF8);
		ДанныеКВозврату = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		УдалитьФайлы(ИмяВременногоФайлаLog);
	Исключение
		// 
	КонецПопытки;
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеКВозврату;

КонецФункции

Функция РольДоступнаЗапросСервера(Знач ИмяРоли) Экспорт
	Возврат РольДоступна(ИмяРоли);
КонецФункции

// Процедура - Выполнить комманду GIT
//
// Параметры:
//  Комманда		 - 	 - 
//  ТекущийКаталог	 - 	 - 
//
Функция ЗапуститьПрограмму(Знач Комманда, Знач ТекущийКаталог) Экспорт
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	Результат = ФайловаяСистема.ЗапуститьПрограмму(
		Комманда, ПараметрыЗапускаПрограммы);
	Если ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда
		ЗаписьЖурналаРегистрации("GIT", УровеньЖурналаРегистрации.Ошибка, , , Результат.ПотокОшибок);
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат.ПотокВывода) Тогда
		ЗаписьЖурналаРегистрации("GIT", УровеньЖурналаРегистрации.Информация, , , Результат.ПотокВывода);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ТаблицаВетокРепозитория(НастройкиПользователя, ПоказыватьЗавершенныеЗадачи) Экспорт

	КомандаЗапуска = НовыйКомандаПолученияВеток();
	СтрокаКоманды = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска);

	Результат = ЗапуститьПрограмму(СтрокаКоманды, НастройкиПользователя.КаталогРепозитория);
	ВыводКоманды = Результат.ПотокВывода;
	
	ТаблицаВеток = НовыйТаблицаВеток();
	
	ЧислоСтрок = СтрЧислоСтрок(ВыводКоманды);
	
	Для Счетчик = 1 По ЧислоСтрок Цикл
		
		Ветка = СокрЛП(СтрПолучитьСтроку(ВыводКоманды, Счетчик));

		ЭтоТекущаяВетка = Лев(Ветка, 1) = "*";
		Если Не ЭтоВеткаЗадачи(Ветка) Или НевалидноеИмяВетки(Ветка) Тогда
			Продолжить;	
		КонецЕсли;
		
		//Обработка веток не по задачам
		
		//Обработка веток по задачам
		НомерЗадачи = НомерЗадачи(Ветка);
		Задача = Справочники.Задачи.ЗадачаПоВетке(НастройкиПользователя,, Ветка);	
		Если Не ПоказыватьЗавершенныеЗадачи И Задача.СтатусЗадачи = Перечисления.СтатусыЗадач.Завершена Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВеток = ТаблицаВеток.Найти(Задача, "Задача");
		Если СтрокаВеток = Неопределено Тогда
			СтрокаВеток = ТаблицаВеток.Добавить();
		КонецЕсли;
		
		СтрокаВеток.Номер = НомерЗадачи;
		СтрокаВеток.Задача = Задача;
		//todo запрос в цикле, переосмыслить подход, но данных будет не много и получать их будем редко
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Наименование, ПодробноеОписание");
		СтрокаВеток.Наименование = РеквизитыЗадачи.Наименование;
		СтрокаВеток.ПодробноеОписание = РеквизитыЗадачи.ПодробноеОписание;
		
		Если Не ЭтоУдаленнаяВетка(Ветка) Тогда
			СтрокаВеток.Локально = Истина;
		КонецЕсли;
			
	КонецЦикла;

	Возврат ТаблицаВеток;
	
КонецФункции

Функция ВнешниеФайлыСРепозитория(Знач ТекущийКаталог) Экспорт

	ВнешниеФайлы = Новый Массив();
	
	Путь = СтрШаблон("%1\%2", ТекущийКаталог, "src\epf");
	Маска = "*.xml";
	
	Файлы = НайтиФайлы(Путь, Маска, Ложь);
	
	Для Каждого Файл Из Файлы Цикл
		
		НомерВерсии = "";
		ИмяОбработки = Файл.ИмяБезРасширения;
		ПутьКМодулюОбъекта = СтрШаблон("%1/%2/Ext/ObjectModule.bsl", Файл.Путь, ИмяОбработки);
		
		Текст = Новый ЧтениеТекста();
		Текст.Открыть(ПутьКМодулюОбъекта, КодировкаТекста.UTF8);
		
		ТекстМодуля = Текст.Прочитать();
		ТекстМодуля = СокрЛП(ТекстМодуля);
		Текст.Закрыть();
		
		RegExp = Новый COMОбъект("VBScript.RegExp");
		RegExp.MultiLine = Истина;
		RegExp.Global = Истина; //Первое совпадение
		RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске

		RegExp.Pattern = "Регистрация\.Версия\s*=\s*""\d+(\.\d+)?";
		
		РезультатАнализаСтроки  = RegExp.Execute(ТекстМодуля);
		Для Каждого Выражение Из РезультатАнализаСтроки Цикл
			
			RegExp.Pattern = "\d+(\.\d+)?";
			КоллекцияСовпаденийВерсии = RegExp.Execute(Выражение.Value);
			Для Каждого ВыражениеНомерВерсии Из КоллекцияСовпаденийВерсии Цикл
				НомерВерсии = ВыражениеНомерВерсии.Value;
				
				Если ЭтоОбработка(Файл.ПолноеИмя) Тогда
					ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Обработка;
				Иначе
					ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Отчет;
				КонецЕсли;
				
				ИнформацияОВнешнемФайле = Новый Структура;
				ИнформацияОВнешнемФайле.Вставить("НомерВерсии", НомерВерсии);
				ИнформацияОВнешнемФайле.Вставить("ИмяОбработки", ИмяОбработки);
				ИнформацияОВнешнемФайле.Вставить("ТипОбъектаРазработки", ТипОбъектаРазработки);
				
				ВнешниеФайлы.Добавить(ИнформацияОВнешнемФайле);

				Прервать;	
			КонецЦикла;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВнешниеФайлы;
	
КонецФункции

Функция ТекущаяЗадача(НастройкиПользователя) Экспорт
	
	КомандаЗапуска = НовыйКомандаТекущаяВетка();
	СтрокаКоманды = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска);
	Результат = ЗапуститьПрограмму(КомандаЗапуска, НастройкиПользователя.КаталогРепозитория);
	ВыводКоманды = Результат.ПотокВывода;
	Если Не ЗначениеЗаполнено(ВыводКоманды) Тогда
		ВызватьИсключение "Не удалось получить текущую задачу";	
	КонецЕсли;
	
	Ветка = СтрЗаменить(СокрЛП(ВыводКоманды), Символы.ПС, "");
	Возврат Справочники.Задачи.ЗадачаПоВетке(НастройкиПользователя,, Ветка);	
	
КонецФункции

// Функция - Разобранная ветка
//
// Параметры:
//  Ветка	 - 	Строка - Имя ветки
// 
// Возвращаемое значение:
//  РазобраннаяВетка - Структура
//
Функция РазобраннаяВетка(Знач Ветка) Экспорт
	
	РазобраннаяВетка = РазобраннаяВеткаНовыйСтруктура(Ветка);
	
	Ветка = СтрЗаменить(Ветка, "remotes/origin/", "");
	ДанныеИзНазванияВетки = СтрРазделить(Ветка, "/");
	Если ДанныеИзНазванияВетки.Количество() = 1 Тогда
		Возврат РазобраннаяВетка;
	КонецЕсли;
	
	РазобраннаяВетка.Префикс = ПрефиксПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	РазобраннаяВетка.НомерЗадачиБазовой = НомерЗадачиБазовойПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	РазобраннаяВетка.НомерЗадачиРазработки = НомерЗадачиРазработкиПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	
	Возврат РазобраннаяВетка;
		
КонецФункции

Функция ШаблонНомераВетки(СтруктураВетки) Экспорт
	
	ШаблонНомераВетки = "%1_%2";
	Если Не ЗначениеЗаполнено(СтруктураВетки.НомерЗадачиБазовой) Тогда
		ШаблонНомераВетки = "%1%2";
	КонецЕсли;
	
	Возврат ШаблонНомераВетки;
	
КонецФункции

Процедура СоздатьНовуюВеткуВГИТПоЗадаче(Задача, НастройкиПользователя) Экспорт
	
	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(Задача);
	ПараметрыБазы = Неопределено;

	АдресХранилища = ПоместитьВоВременноеХранилище(
		Новый Структура("ВыводИнформация, ВыводОшибки, ЗапускЗавершен", "", "", Ложь));	
	
	КомандаЗапуска = НовыйКомандаСозданияВетки(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи);
	ЗапускПриложенийЧерезShell.ЗапускПриложения(КомандаЗапуска, НастройкиПользователя.КаталогРепозитория, АдресХранилища);
	
КонецПроцедуры

Процедура СоздатьНовыйРепозиторийВГИТ(НастройкиПользователя) Экспорт
	
	ПараметрыЗадачи = Неопределено;
	
	База = Справочники.Базы.БазаТекущегоПользователя();	
	ПараметрыБазы = Справочники.Базы.НастройкиБазы(База);

	АдресХранилища = ПоместитьВоВременноеХранилище(
		Новый Структура("ВыводИнформация, ВыводОшибки, ЗапускЗавершен", "", "", Ложь));	
	
	КомандаЗапуска = НовыйКомандаСозданияРепозитория(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи);
	ЗапускПриложенийЧерезShell.ЗапускПриложения(КомандаЗапуска, НастройкиПользователя.КаталогРепозитория, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

#Область Команды

Функция НовыйКомандаПолученияВеток()
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить("git");
	КомандаЗапуска.Добавить("branch");
	КомандаЗапуска.Добавить("--no-color");
	КомандаЗапуска.Добавить("-a");
	
	Возврат КомандаЗапуска;
	
КонецФункции

Функция НовыйКомандаТекущаяВетка()
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить("git");
	КомандаЗапуска.Добавить("symbolic-ref");
	КомандаЗапуска.Добавить("--short");
	КомандаЗапуска.Добавить("HEAD");
	
	Возврат КомандаЗапуска;
	
КонецФункции

// Функция - Формирование строки запуска
//	PathRepository - Путь репозитория
//	NewBranche - Новая ветка
//	NameDB - Имя информационной базы
//	UsrLogin1c - Имя пользователя 1с
//	UsrPswd1c - Пароль пользователя 1с
//	PathServer1с - Путь к серверу 1с
//	NumberPlatform - Номер версии платформы 1с
//	TypeDB - Тип СУБД
//	UsrLoginDB - Имя пользователя СУБД
//	UsrPswdDB - Пароль пользователя СУБД
//	PathServerDB - Путь к серверу СУБД
//	RunRas - Запускать РАС
//	NamesDataProcessors - Обработки через "," (запятая)
//	LoadDB - Загрузка базы из файлов (истина, ложь)
//	MethodLoadDB - ibcmd / designer
// Возвращаемое значение:
//   - 
//
Функция НовыйКомандаПереходаНаВетку(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи) Экспорт

	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить("oscript");
	КомандаЗапуска.Добавить("E:\Users\!DEVOps\devcli\main.os");
	КомандаЗапуска.Добавить("branche");
	КомандаЗапуска.Добавить("--PathRepository");
	КомандаЗапуска.Добавить(НастройкиПользователя.КаталогРепозитория);
	
	//ПараметрыБазы
	КомандаЗапуска.Добавить("--NameDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ИмяИнформационнойБазы);
	КомандаЗапуска.Добавить("--UsrLogin1c");
	КомандаЗапуска.Добавить(ПараметрыБазы.ИмяПользователяИнформационнойБазы);
	КомандаЗапуска.Добавить("--UsrPswd1c");
	КомандаЗапуска.Добавить(ПараметрыБазы.ПарольПользователяИнформационнойБазы);
	КомандаЗапуска.Добавить("--PathServer1с");
	КомандаЗапуска.Добавить(ПараметрыБазы.КластерСерверов);
	КомандаЗапуска.Добавить("--NumberPlatform");
	КомандаЗапуска.Добавить(ПараметрыБазы.НомерВерсииПлатформы);
	КомандаЗапуска.Добавить("--TypeDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ТипSQL);
	КомандаЗапуска.Добавить("--UsrLoginDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ЛогинSQL);
	КомандаЗапуска.Добавить("--UsrPswdDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ПарольSQL);
	КомандаЗапуска.Добавить("--PathServerDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.КластерСерверов);
	КомандаЗапуска.Добавить("--RunRas");
	КомандаЗапуска.Добавить("false");
	КомандаЗапуска.Добавить("--MethodLoadDB");
	КомандаЗапуска.Добавить(Строка(ПараметрыБазы.РежимРаботыКонфигурации));
	
	//ПараметрыЗадачи
	КомандаЗапуска.Добавить("--NewBranche");
	КомандаЗапуска.Добавить(ПараметрыЗадачи.ИмяВетки);
	
	Если ЗначениеЗаполнено(ПараметрыЗадачи.ДорабатыватьКонфигурацию) Тогда
		КомандаЗапуска.Добавить("--LoadDB");
		КомандаЗапуска.Добавить(Формат(ПараметрыЗадачи.ДорабатыватьКонфигурацию, "БЛ=false; БИ=true"));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПараметрыЗадачи.ВнешниеФайлы) Тогда
		КомандаЗапуска.Добавить("--NamesDataProcessors");
		КомандаЗапуска.Добавить(ПараметрыЗадачи.ВнешниеФайлы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадачи.Расширения) Тогда
		КомандаЗапуска.Добавить("--Extensions");
		КомандаЗапуска.Добавить(ПараметрыЗадачи.Расширения);
	КонецЕсли;
	
	ОбернутьОпцииКомандыВЗнакРавно(КомандаЗапуска);
	
	Возврат КомандаЗапуска
	
КонецФункции

// Функция - Формирование строки запуска
//PathRepository - Путь репозитория
//NameDB - Имя информационной базы
//UsrLogin1c - Имя пользователя 1с
//UsrPswd1c - Пароль пользователя 1с
//PathServer1c - Путь к серверу
//NumberPlatform - Номер версии платформы 1с
//TypeDB - Тип СУБД
//UsrLoginDB - Имя пользователя СУБД
//UsrPswdDB - Пароль пользователя СУБД
//PathServerDB - Путь к серверу СУБД
//TextCommit - Текст коммита
//UrlGitLab - Ссылка на Гит лаб
//TokenConnectionGitLab - Токен подключения к гитлаб
//IdProject - ИД проекта Гит лаб (отдельно ВМС, отдельно ЕРП, отдельно ТМС)// Возвращаемое значение:
//   - 
//
Функция НовыйКомандаФиксацияИзменений(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи, ДополнительныеПараметры) Экспорт

	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить("oscript");
	КомандаЗапуска.Добавить("E:\Users\!DEVOps\devcli\main.os");
	КомандаЗапуска.Добавить("commit");
	
	КомандаЗапуска.Добавить("--PathRepository");
	КомандаЗапуска.Добавить(НастройкиПользователя.КаталогРепозитория);
	
	//ПараметрыБазы
	КомандаЗапуска.Добавить("--NameDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ИмяИнформационнойБазы);
	КомандаЗапуска.Добавить("--UsrLogin1c");
	КомандаЗапуска.Добавить(ПараметрыБазы.ИмяПользователяИнформационнойБазы);
	КомандаЗапуска.Добавить("--UsrPswd1c");
	КомандаЗапуска.Добавить(ПараметрыБазы.ПарольПользователяИнформационнойБазы);
	КомандаЗапуска.Добавить("--PathServer1с");
	КомандаЗапуска.Добавить(ПараметрыБазы.КластерСерверов);
	КомандаЗапуска.Добавить("--NumberPlatform");
	КомандаЗапуска.Добавить(ПараметрыБазы.НомерВерсииПлатформы);
	КомандаЗапуска.Добавить("--TypeDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ТипSQL);
	КомандаЗапуска.Добавить("--UsrLoginDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ЛогинSQL);
	КомандаЗапуска.Добавить("--UsrPswdDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.ПарольSQL);
	КомандаЗапуска.Добавить("--PathServerDB");
	КомандаЗапуска.Добавить(ПараметрыБазы.КластерСерверов);
	КомандаЗапуска.Добавить("--UrlGitLab");
	КомандаЗапуска.Добавить(ПараметрыБазы.URLGitLab);
	КомандаЗапуска.Добавить("--TokenConnectionGitLab");
	КомандаЗапуска.Добавить(НастройкиПользователя.ТокенGitLab);
	КомандаЗапуска.Добавить("--IdProject");
	КомандаЗапуска.Добавить(ПараметрыБазы.ИДПроектаGitLab);
	КомандаЗапуска.Добавить("--RunRas");
	КомандаЗапуска.Добавить("false");
	КомандаЗапуска.Добавить("--MethodLoadDB");
	КомандаЗапуска.Добавить(Строка(ПараметрыБазы.РежимРаботыКонфигурации));
	
	Если ЗначениеЗаполнено(ПараметрыЗадачи.ДорабатыватьКонфигурацию) Тогда
		КомандаЗапуска.Добавить("--LoadDB");
		КомандаЗапуска.Добавить(Формат(ПараметрыЗадачи.ДорабатыватьКонфигурацию, "БЛ=false; БИ=true"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадачи.Расширения) Тогда
		КомандаЗапуска.Добавить("--Extensions");
		КомандаЗапуска.Добавить(ПараметрыЗадачи.Расширения);
	КонецЕсли;
	
	//ПараметрыЗадачи
	КомандаЗапуска.Добавить("--TextCommit");
	КомандаЗапуска.Добавить(ДополнительныеПараметры.ТекстКоммита);
	
	ОбернутьОпцииКомандыВЗнакРавно(КомандаЗапуска);
	
	Возврат КомандаЗапуска
	
КонецФункции

// Функция - Формирование строки запуска
//PathRepository - Путь репозитория
//NewBranche - Новая ветка
//   - 
//
Функция НовыйКомандаСозданияВетки(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи) Экспорт

	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить("oscript");
	КомандаЗапуска.Добавить("E:\Users\!DEVOps\devcli\main.os");
	КомандаЗапуска.Добавить("CreateBranche");
	
	КомандаЗапуска.Добавить("--PathRepository");
	КомандаЗапуска.Добавить(НастройкиПользователя.КаталогРепозитория);
	
	//ПараметрыБазы
	КомандаЗапуска.Добавить("--NewBranche");
	КомандаЗапуска.Добавить(ПараметрыЗадачи.ИмяВетки);
	
	Возврат КомандаЗапуска
	
КонецФункции

// Функция - Формирование строки запуска
//PathRepository - Путь репозитория
//PathRemoteRepository - Путь удаленного репозитория
//UserName - Имя пользователя
//UserEmail - Почта пользователя
//   - 
//
Функция НовыйКомандаСозданияРепозитория(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи) Экспорт

	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить("oscript");
	КомандаЗапуска.Добавить("E:\Users\!DEVOps\devcli\main.os");
	КомандаЗапуска.Добавить("init");
	
	КомандаЗапуска.Добавить("--PathRepository");
	КомандаЗапуска.Добавить(НастройкиПользователя.КаталогРепозитория);
	КомандаЗапуска.Добавить("--PathRemoteRepository");
	КомандаЗапуска.Добавить(ПараметрыБазы.PathGitClone);
	КомандаЗапуска.Добавить("--UserName");
	КомандаЗапуска.Добавить(НастройкиПользователя.ИмяПользователяGitLab);	
	КомандаЗапуска.Добавить("--UserEmail");
	КомандаЗапуска.Добавить(НастройкиПользователя.ПочтаПользователяGitLab);
	
	Возврат КомандаЗапуска
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоВеткаРазработка(Ветка)
	Возврат СтрНайти(Ветка, "develop") > 0;	
КонецФункции

Функция ЭтоУдаленнаяВетка(Ветка)
	Возврат СтрНайти(Ветка, "remotes") > 0;	
КонецФункции

Функция ЭтоВеткаЗадачи(Ветка)
	Возврат СтрНайти(Ветка, "feature") > 0;	
КонецФункции

Функция НевалидноеИмяВетки(Ветка)
	Возврат СтрРазделить(Ветка, "_").Количество() > 2 Или СтрНайти(Ветка, "-") > 0;
КонецФункции

Функция ЭтоВеткаРелиз(Ветка)
	Возврат СтрНайти(Ветка, "release") > 0;	
КонецФункции

Функция НомерЗадачи(Ветка)
	Возврат РазобраннаяВетка(Ветка).НомерЗадачиРазработки;
КонецФункции

Функция НовыйТаблицаВеток()
	
	ТаблицаВеток = Новый ТаблицаЗначений();
	ТаблицаВеток.Колонки.Добавить("Текущая", Новый ОписаниеТипов("Булево"));
	ТаблицаВеток.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ТаблицаВеток.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	ТаблицаВеток.Колонки.Добавить("Локально", Новый ОписаниеТипов("Булево"));
	ТаблицаВеток.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаВеток.Колонки.Добавить("ПодробноеОписание", Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаВеток;
	
КонецФункции

Функция ЭтоОбработка(ПутьКФайлу)
	
	Текст = Новый ЧтениеТекста();
	Текст.Открыть(ПутьКФайлу, КодировкаТекста.UTF8);
	
	ТекстМодуля = Текст.Прочитать();
	Текст.Закрыть();
	Возврат СтрНайти(ТекстМодуля, "ExternalDataProcessor") > 0;
	
КонецФункции

// Процедура - Обернуть опции команды в равно
//
// Параметры:
//  КомандаЗапуска	 - Массив	 - Массив команд  
//
Функция ОбернутьОпцииКомандыВЗнакРавно(КомандаЗапуска)
		
	Для ИндексМассива = 2 По КомандаЗапуска.ВГраница() Цикл
		
		Опция =	КомандаЗапуска[ИндексМассива]; 
		
		Если ЭтоЗаголовокОпцииКоманднойСтроки(Опция) Тогда
			Продолжить;
		КонецЕсли;
		
		КомандаЗапуска[ИндексМассива] = СтрШаблон("%1", Опция);
		
	КонецЦикла;
	
КонецФункции

Функция ЭтоЗаголовокОпцииКоманднойСтроки(Опция)
	Возврат Лев(Опция, 2) = "--";
КонецФункции

Функция РазобраннаяВеткаНовыйСтруктура(Ветка)
	                         	
	РазобраннаяВеткаНовыйСтруктура = Новый Структура;
	РазобраннаяВеткаНовыйСтруктура.Вставить("Префикс", Справочники.ПрефиксыЗадач.ПустаяСсылка());
	РазобраннаяВеткаНовыйСтруктура.Вставить("НомерЗадачиБазовой", "");
	РазобраннаяВеткаНовыйСтруктура.Вставить("НомерЗадачиРазработки", "");
	РазобраннаяВеткаНовыйСтруктура.Вставить("ИсходноеИмяВетки", Ветка);
	
	Возврат РазобраннаяВеткаНовыйСтруктура;

КонецФункции

Функция ПрефиксПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	Попытка
		Возврат Справочники.ПрефиксыЗадач[ДанныеИзНазванияВетки[0]];
	Исключение
		Возврат Справочники.ПрефиксыЗадач.ПустаяСсылка();
	КонецПопытки;

КонецФункции

Функция НомерЗадачиБазовойПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	НомерЗадачиБазовой = "";
	
	МассивНазваний = СтрРазделить(ДанныеИзНазванияВетки[1], "_", Ложь);
	Если МассивНазваний.Количество() = 2 Тогда
		НомерЗадачиБазовой = МассивНазваний[0];
	КонецЕсли;	

	Возврат НомерЗадачиБазовой;
	
КонецФункции

Функция НомерЗадачиРазработкиПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	НомерЗадачиРазработки = "";
	
	МассивНазваний = СтрРазделить(ДанныеИзНазванияВетки[1], "_", Ложь);
	Если МассивНазваний.Количество() > 0 Тогда
		НомерЗадачиРазработки = МассивНазваний[МассивНазваний.ВГраница()];
	КонецЕсли;	

	Возврат НомерЗадачиРазработки;
		
КонецФункции



#КонецОбласти
