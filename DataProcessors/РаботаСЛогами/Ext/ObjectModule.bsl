#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем Лог;
Перем СтрокиЛогов;
Перем ИмяФайлаЛогов;
#КонецОбласти

#Область ПрограммныйИнтерфейс
Функция УстановитьТекстЛогов(ТекстЛогов) Экспорт
	Лог = ТекстЛогов;	
	Возврат ЭтотОбъект;	
КонецФункции

Функция УстановитьФайлЛогов(ИмяФайла) Экспорт
	
	ИмяФайлаЛогов = ИмяФайла;
	Возврат ЭтотОбъект;
	
КонецФункции

Функция УстановитьДанныеФайлаВЛог() Экспорт

	ИмяФайлаКопия  = ПолучитьИмяВременногоФайла("log");
	КопироватьФайл(ИмяФайлаЛогов, ИмяФайлаКопия);
	
	ВыбФайл = Новый Файл(ИмяФайлаКопия);
	
	Если ВыбФайл.Существует() Тогда
		
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяФайлаКопия, "cp866");
		Лог = Текст.ПолучитьТекст();
		
	Иначе
		Сообщить("Файл не найден!");
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаКопия);
	
	Возврат ЭтотОбъект;	
	
КонецФункции

Функция ПолучитьТекстЛога() Экспорт
	Возврат Лог;	
КонецФункции

Функция РазвернутьТекст() Экспорт
	
	ОбратныйВыводТекста = Новый Массив;
	
	Для каждого Строка Из СтрокиЛогов Цикл
		Если ОбратныйВыводТекста.Количество() И ОбратныйВыводТекста.Получить(0) = Строка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбратныйВыводТекста.Вставить(0, Строка);
	КонецЦикла;
	
	СтрокиЛогов = ОбратныйВыводТекста;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция СкрытьПароли() Экспорт
	//todo
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ПреобразоватьКодировку(ИсходнаяКодировка = "windows-1251", НоваяКодировка = "cp866") Экспорт
	
	ВременныйФайлИсходный = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекстаИсходный = Новый ТекстовыйДокумент;
	ЗаписьТекстаИсходный.УстановитьТекст(Лог);
	ЗаписьТекстаИсходный.Записать(ВременныйФайлИсходный, ИсходнаяКодировка);
	
	ЧтениеТекстаНовый = Новый ТекстовыйДокумент;
	ЧтениеТекстаНовый.Прочитать(ВременныйФайлИсходный, НоваяКодировка); 
	КонвертированныйТекст = ЧтениеТекстаНовый.ПолучитьТекст();
	
	ФайловаяСистема.УдалитьВременныйФайл(ВременныйФайлИсходный);
	Лог = КонвертированныйТекст;
	Возврат ЭтотОбъект;	
	
КонецФункции

Функция РазложитьСтроки() Экспорт
	СтрокиЛогов	= СтрРазделить(Лог, Символы.ПС);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция СложитьСтроки() Экспорт
	Лог	= СтрСоединить(СтрокиЛогов, Символы.ПС);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ПодменаТекста(НеПодменять = Истина) Экспорт
	
	Если НеПодменять Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	ПодменыВыводаЛога = ПодменыВыводаЛога();
	
	Для Индекс = 0 По СтрокиЛогов.ВГраница() Цикл
		
		Строка = СтрокиЛогов[Индекс];
		
		Для Каждого Элемент Из ПодменыВыводаЛога Цикл
			
			Если СтрНайти(Строка, Элемент.Ключ) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиЛогов[Индекс] = Элемент.Значение;
			Прервать;
			
		КонецЦикла;	
		
	КонецЦикла;

	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодменыВыводаЛога()

	Результат = Новый Соответствие;
	Результат.Вставить("pull", "[GIT] Получаем изменения репозитория");
	Результат.Вставить("session list", "[RAC] Получаем список сеансов в базе");
	Результат.Вставить("connection list", "[RAC] Получаем список соединений в базе");
	Результат.Вставить("infobase config export", "[IBCMD] Экспортируем конфигурацию из базы в файлы");
	Результат.Вставить("-sessions-deny=on", "[RAC] Блокировка базы");
	Результат.Вставить("sessions-deny=off", "[RAC] Снятие блокировка базы");
	Результат.Вставить("--version", "[IBCMD] Получение версии 1с");
	Результат.Вставить("infobase summary list", "[RAC] Получение списка баз кластера");
	Результат.Вставить("cluster list", "[RAC] Получение информации о кластере");
	Результат.Вставить(" add ", "[GIT] Добавление изменений к фиксации");
	Результат.Вставить(" push ", "[GIT] Отправка изменений на сервер");
	Результат.Вставить(" branch  ", "[GIT] Создание ветки");
	Результат.Вставить(" checkout  ", "[GIT] Переход на ветку");
	Результат.Вставить(" infobase config import ", "[IBCMD] Загрузка конфигурации в базу");
	Результат.Вставить(" infobase config apply ", "[IBCMD] Применение изменений в базе");
	Результат.Вставить(" symbolic-ref --short", "[GIT] Получаем информацию о текущей ветке");
	Результат.Вставить("LoadConfigFromFiles", "[1CV8] Загрузка конфигурации из файлов");
	Результат.Вставить("session terminate", "[RAC] Завершаем сеансы");
	Результат.Вставить("LoadExternalDataProcessorOrReportFromFiles", "[1CV8] Загрузка внешней обработки");
	Результат.Вставить("DumpExternalDataProcessorOrReportToFiles", "[1CV8] Вызрузка внешней обработки");
	Результат.Вставить("-Extension", "[1CV8] Работа с расширением");
	Результат.Вставить("ОбновлениеОбработок#", "[1CV8] Загрузка обработок в базу");

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
