#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ИнформацияОЗадаче(ДляПолученияЗадач) Экспорт
	
	ТокенBitrix = Константы.ТокенBitrix.Получить(); 
	
	Результат = Новый Структура;
	
	СтрокаЗапроса = СтрШаблон(ДляПолученияЗадач.СтрокаЗапроса,
			ТокенBitrix, ДляПолученияЗадач.НомерЗадачи);

	ИнформацияОЗадаче = КоннекторHTTP.GetJson(СтрокаЗапроса);
	
	Если ИнформацияОЗадаче["error"] = Неопределено Тогда
		Результат.Вставить("Наименование", ИнформацияОЗадаче["result"]["task"]["title"]);
		Результат.Вставить("ПодробноеОписание", ИнформацияОЗадаче["result"]["task"]["description"]);
		Результат.Вставить("Ответственный", ИнформацияОЗадаче["result"]["task"]["responsible"]["name"]);
		Результат.Вставить("Статус", ИнформацияОЗадаче["result"]["task"]["status"]);
		Результат.Вставить("Стадия", ИнформацияОЗадаче["result"]["task"]["stageId"]);
		Результат.Вставить("НомерЗадачиБазовой", ИнформацияОЗадаче["result"]["task"]["parentId"]);
	Иначе	
		Результат.Вставить("Наименование", "Не смогли получить задачу из Bitrix");
		Результат.Вставить("Описание", ИнформацияОЗадаче["error_description"]);
	КонецЕсли;

	Результат.Вставить("СсылкаBitrix", СтрШаблон(ДляПолученияЗадач.СсылкаBitrix, ДляПолученияЗадач.НомерЗадачи));
	//todo возможно эти данные надо брать не от пользователя
	Результат.Вставить("Проект", ДляПолученияЗадач.НастройкиПользователя.Проект);
	//todo добавить путь к задаче в gitlab
	//http://192.168.45.252:8001/mi/wms/-/tree/feature/120553_120554?ref_type=heads
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеЗадачи(Задача, НастройкиПользователя, Ветка, ЗаполнятьНомерЗадачиИзОбъекта = Ложь) Экспорт
	
	Перем РазобраннаяВетка;
	
	Если Не Ветка = Неопределено Тогда
		РазобраннаяВетка = РаботаСGit.РазобраннаяВетка(Ветка);
	КонецЕсли;
	Если ЗаполнятьНомерЗадачиИзОбъекта Тогда
		НомерЗадачи = Задача.НомерЗадачи;
	Иначе
		НомерЗадачи = РазобраннаяВетка.НомерЗадачиРазработки;	
	КонецЕсли;
	
	ДляПолученияЗадач = НовыйДанныеДляПолученияЗадач();
	ДляПолученияЗадач.НомерЗадачи = НомерЗадачи;
	ДляПолученияЗадач.НастройкиПользователя = НастройкиПользователя;
	
	ИнформацияОЗадаче = ИнформацияОЗадаче(ДляПолученияЗадач);
	
	ЗаполнитьЗначенияСвойств(Задача, ИнформацияОЗадаче);
	
	Задача.Код = НомерЗадачи;
	Задача.Владелец = ИнформацияОЗадаче.Проект;
	Задача.НомерЗадачи = НомерЗадачи;
	
	Если РазобраннаяВетка <> Неопределено Тогда
		
		Задача.ПрефиксВетки = РазобраннаяВетка.Префикс;
		
		Задача.ИмяВетки = СтрШаблон(РаботаСGit.ШаблонНомераВетки(РазобраннаяВетка),
			РазобраннаяВетка.НомерЗадачиБазовой, РазобраннаяВетка.НомерЗадачиРазработки);
	Иначе
		Задача.ПрефиксВетки = Справочники.ПрефиксыЗадач.feature;
		
		СтруктураВетки = Новый Структура;
		СтруктураВетки.Вставить("НомерЗадачиБазовой", ИнформацияОЗадаче.НомерЗадачиБазовой);
		СтруктураВетки.Вставить("НомерЗадачиРазработки", НомерЗадачи);
		
		Задача.ИмяВетки = СтрШаблон(РаботаСGit.ШаблонНомераВетки(СтруктураВетки),
			СтруктураВетки.НомерЗадачиБазовой, СтруктураВетки.НомерЗадачиРазработки);
			
	КонецЕсли;
	
	Задача.Записать();
	
КонецПроцедуры

Функция ОбъектыРазработки(Задача)
	

	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ВнешниеФайлы, Расширения, ДорабатыватьКонфигурацию");
	
	Результат = Новый Структура;
	Результат.Вставить("ВнешниеФайлы", РеквизитыЗадачи.ВнешниеФайлы.ВыгрузитьКолонки("Обработка"));
	Результат.Вставить("Расширения", "");
	Результат.Вставить("ДорабатыватьКонфигурацию", РеквизитыЗадачи.ДорабатыватьКонфигурацию);
	
	
КонецФункции

Функция РеквизитыЗадачи(Задача) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Задачи.ИмяВетки КАК ИмяВетки,
		|	ПРЕДСТАВЛЕНИЕ(Задачи.ПрефиксВетки) КАК ПрефиксВетки,
		|	Задачи.ВнешниеФайлы.(
		|		Обработка КАК Обработка
		|	) КАК ВнешниеФайлы,
		|	Задачи.Расширения.(
		|		Расширение КАК Расширение
		|	) КАК Расширения,
		|	Задачи.ДорабатыватьКонфигурацию КАК ДорабатыватьКонфигурацию
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	РеквизитыЗадачи = Запрос.Выполнить().Выгрузить()[0];
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("ВнешниеФайлы", СтрСоединить(РеквизитыЗадачи.ВнешниеФайлы.ВыгрузитьКолонку("Обработка"), ","));
	ПараметрыЗадачи.Вставить("Расширения", СтрСоединить(РеквизитыЗадачи.Расширения.ВыгрузитьКолонку("Расширение"), ","));
	ПараметрыЗадачи.Вставить("ИмяВетки", СтрШаблон("%1/%2", РеквизитыЗадачи.ПрефиксВетки, РеквизитыЗадачи.ИмяВетки));
	ПараметрыЗадачи.Вставить("ДорабатыватьКонфигурацию", РеквизитыЗадачи.ДорабатыватьКонфигурацию);
	
	Возврат ПараметрыЗадачи;
		
КонецФункции

Функция ЗадачаПоВетке(НастройкиПользователя, НомерЗадачи = Неопределено, Ветка = Неопределено) Экспорт
	
	Если НомерЗадачи = Неопределено И Ветка = Неопределено Тогда
		ВызватьИсключение "Параметры ""Номер задачи"" или ""Ветка"" должны быть заполнены!";
	КонецЕсли;
	
	Если НомерЗадачи = Неопределено Тогда
		НомерЗадачи = РаботаСGit.РазобраннаяВетка(Ветка).НомерЗадачиРазработки;
	КонецЕсли;
	
	Задача = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", НомерЗадачи);
	Если Задача = Справочники.Задачи.ПустаяСсылка() Тогда
		ЗадачаОбъект = СоздатьЭлемент();
		ЗадачаОбъект.НомерЗадачи = НомерЗадачи;
		
		ЗаполнитьДанныеЗадачи(ЗадачаОбъект, НастройкиПользователя,, Истина);
		Задача = ЗадачаОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Задача;
	
КонецФункции

Функция НоваяЗадача(НастройкиПользователя, НомерЗадачи = Неопределено, Ветка = Неопределено) Экспорт
	
	Если НомерЗадачи = Неопределено И Ветка = Неопределено Тогда
		ВызватьИсключение "Параметры ""Номер задачи"" или ""Ветка"" должны быть заполнены!";
	КонецЕсли;
	
	Если НомерЗадачи = Неопределено Тогда
		НомерЗадачи = РаботаСGit.РазобраннаяВетка(Ветка).НомерЗадачиРазработки;
	КонецЕсли;
	
	Задача = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", НомерЗадачи);
	Если Задача = Справочники.Задачи.ПустаяСсылка() Тогда
		ЗадачаОбъект = СоздатьЭлемент();
		ЗадачаОбъект.НомерЗадачи = НомерЗадачи;
		
		ЗаполнитьДанныеЗадачи(ЗадачаОбъект, НастройкиПользователя,, Истина);
		Задача = ЗадачаОбъект.Ссылка;
	КонецЕсли;
	
	РаботаСGit.СоздатьНовуюВеткуВГИТПоЗадаче(Задача, НастройкиПользователя);
	
	Возврат Задача;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыйДанныеДляПолученияЗадач() Экспорт
		                         
	Результат = Новый Структура;
	Результат.Вставить("СсылкаBitrix", "https://b24/company/personal/user/5495/tasks/task/view/%1/");
	Результат.Вставить("СтрокаЗапроса", "https://b24/rest/1/%1/tasks.task.get.json?taskId=%2");
	Результат.Вставить("НастройкиПользователя", Новый Структура);
	Результат.Вставить("НомерЗадачи", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтатусЗадачи(НомерСтатуса) Экспорт

	Результат = Новый Соответствие;
	Результат.Вставить("2", Перечисления.СтатусыЗадач.ЖдетВыполнения);
	Результат.Вставить("3", Перечисления.СтатусыЗадач.Выполняется);
	Результат.Вставить("4", Перечисления.СтатусыЗадач.ЖдетКонтроля);
	Результат.Вставить("5", Перечисления.СтатусыЗадач.Завершена);
	
	Возврат Результат[НомерСтатуса];
	
КонецФункции

#КонецОбласти

#КонецЕсли
