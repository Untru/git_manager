#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьЗначенияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриИзмененииБазы(Элемент)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.База) Тогда
		//ЭтотОбъект.ТекущаяЗадача = ПолучитьПоследнююЗадачуПоБазе(ЭтотОбъект.База);
		ЭтотОбъект.Проект = ПолучитьПроект(ЭтотОбъект.База);
	Иначе
		//ЭтотОбъект.ТекущаяЗадача = Неопределено;
		ЭтотОбъект.Проект = Неопределено;
	КонецЕсли;
	//Элементы.ТекущаяЗадача.Заголовок = ОтобразитьТекущуюЗадачу(ЭтотОбъект.ТекущаяЗадача);
	Элементы.Проект.Заголовок = ОтобразитьТекущийПроект(ЭтотОбъект.База);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗавершенныеЗадачиПриИзменении(Элемент)
	ОбновитьСписокЗадач(ПоказыватьЗавершенныеЗадачи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьЗадачуВБазуТолькоОбработки(Команда)
	
	Задача = Элементы.Задачи.ТекущиеДанные.Задача;
	КомандаЗапуска = КомандаЗапускаПерейтиНаВеткуТолькоОбработки(Задача, НастройкиПользователя, База);
	ЗапускПриложения(КомандаЗапуска);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновныеОперации;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗадачуВБазу(Команда)
	
	Задача = Элементы.Задачи.ТекущиеДанные.Задача;
	КомандаЗапуска = КомандаЗапускаПерейтиНаВетку(Задача, НастройкиПользователя, База);
	ЗапускПриложения(КомандаЗапуска);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновныеОперации;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДругуюЗадачу(Команда)	
	ОбновитьСписокЗадач(ПоказыватьЗавершенныеЗадачи);	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НоваяЗадача(Команда)
	
	НомерНовойЗадачи = "";
	
	Обещание = ВвестиСтрокуАсинх(НомерНовойЗадачи, НСтр("ru='Введите номер задачи разработки'"));
	НомерНовойЗадачи = Ждать Обещание;
	Если ЗначениеЗаполнено(НомерНовойЗадачи) Тогда
		НоваяЗадача = НоваяЗадачаНаСервере(НастройкиПользователя, НомерНовойЗадачи);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", НоваяЗадача);
		
		ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("ПослеСозданияНовойЗадачи", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьИзменения(Команда)
	
	ТекстКоммита = "";
	
	Обещание = ВвестиСтрокуАсинх(ТекстКоммита, НСтр("ru='Введите текст коммита'"),, Истина);
	ТекстКоммита = Ждать Обещание;
	Если ЗначениеЗаполнено(ТекстКоммита) Тогда
		ЗафиксироватьИзмененияПослеВводаКоммита(ТекстКоммита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяЗадача(Команда)
	Если ЗначениеЗаполнено(ЭтотОбъект.ТекущаяЗадача) Тогда
		ПоказатьЗначение(,ЭтотОбъект.ТекущаяЗадача);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользователь(Команда)
	ПоказатьЗначение(,ЭтотОбъект.ТекущийПользователь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.Задачи.ТекущиеДанные.Задача);
КонецПроцедуры

#КонецОбласти

#Область ЗапросыКСервису

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьЗначенияФормы()
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	
	Если Не ЗначениеЗаполнено(База) Тогда
		База = Справочники.Базы.БазаТекущегоПользователя();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПользователя) Тогда
		ТекущийПользователь = НастройкиПользователя.Настройка;
		Проект = НастройкиПользователя.Проект;	
		КаталогРепозитория = НастройкиПользователя.КаталогРепозитория; 
	КонецЕсли;
	//todo пока не поправят окружение
	Попытка
		ТекущаяЗадача = РаботаСGit.ТекущаяЗадача(НастройкиПользователя);
	Исключение
		//ОписаниеОшибки()
	КонецПопытки;
	
	ОбновитьСписокЗадач(ПоказыватьЗавершенныеЗадачи);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ТекущаяЗадача.Заголовок = ОтобразитьТекущуюЗадачу(ТекущаяЗадача);
	Элементы.ТекущийПользователь.Заголовок = СтрШаблон("%1 (Каталог разработки: %2)",ТекущийПользователь, КаталогРепозитория);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтобразитьТекущуюЗадачу(Знач Задача)
	
	Если ЗначениеЗаполнено(Задача) Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Наименование, НомерЗадачи");
		Возврат СтрШаблон("[%1] %2 %3", РеквизитыЗадачи.НомерЗадачи, Символы.ПС, РеквизитыЗадачи.Наименование); 
	КонецЕсли;
	
	Возврат "Текущая задача не выбрана";
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтобразитьТекущийПроект(ОбъектПроект);
	
	Если ЗначениеЗаполнено(ОбъектПроект) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПроект, "Наименование");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроект(ОбъектБаза)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектБаза, "Владелец");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьПоследнююБазуИЗадачу(База, ТекущаяЗадача, Пользователь)
	
	//todo вынести метод, тут ему не место
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТекущиеЗадачи.База КАК База,
	|	ТекущиеЗадачи.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТекущиеЗадачи.База КАК База,
	|			МАКСИМУМ(ТекущиеЗадачи.ДатаОбновления) КАК ДатаОбновления
	|		ИЗ
	|			РегистрСведений.ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ГДЕ
	|			ТекущиеЗадачи.База.Ответственный = &ТекущийПользователь
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТекущиеЗадачи.База) КАК ПоследняяЗадача
	|		ПО (ПоследняяЗадача.ДатаОбновления = ТекущиеЗадачи.ДатаОбновления)
	|ГДЕ
	|	ТекущиеЗадачи.База.Ответственный = &ТекущийПользователь";
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			База          = Выборка.База;
			ТекущаяЗадача = Выборка.Задача;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнююЗадачуПоБазе(База)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТекущиеЗадачи.База КАК База,
	|	ТекущиеЗадачи.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.ТекущиеЗадачи КАК ТекущиеЗадачи
	|ГДЕ
	|	ТекущиеЗадачи.База = &База";
	Запрос.УстановитьПараметр("База", База);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Задача;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Задачи.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура Тест(Команда)
	
	Логи = "";
	ЗапускПриложения("");
	ПодключитьОбработчикОжидания("ВыводЛогов",5);

КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения(КомандаЗапуска)
	
	Если Не ПроверитьЗаполнение() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не все данные заполнены'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ЗапускПриложенияНаСервере(КомандаЗапуска);
	ПодключитьОбработчикОжидания("ВыводЛогов",3);	
КонецПроцедуры

&НаСервере
Процедура ЗапускПриложенияНаСервере(КомандаЗапуска)
	
	КаталогЗапуска = НастройкиПользователя.КаталогРепозитория;
	//Работа через Shell
	
	//Тестовые команды
	//КомандаЗапуска = Новый Массив;
	//КомандаЗапуска.Добавить("ping");
	//КомандаЗапуска.Добавить("127.0.0.1");
	//КомандаЗапуска.Добавить("-n");
	//КомандаЗапуска.Добавить(25);

	////todo Вынести в общий моуль
	//АдресХранилища = ПоместитьВоВременноеХранилище(
	//	Новый Структура("ВыводИнформация, ВыводОшибки, ЗапускЗавершен", "", "", Ложь));
	//	
	//	
	//МассивПараметров = Новый Массив;
	//МассивПараметров.Добавить(КомандаЗапуска);
	//МассивПараметров.Добавить(КаталогЗапуска);
	//МассивПараметров.Добавить(АдресХранилища);
	//УникальныйИдентификаторФонового = ФоновыеЗадания.Выполнить("ЗапускПриложенийЧерезShell.ЗапускПриложения", МассивПараметров).УникальныйИдентификатор;
	ИмяФайлаПотокаВывода = ПолучитьИмяВременногоФайла("stdout.tmp");
	ИмяФайлаПотокаОшибок = ПолучитьИмяВременногоФайла("stderr.tmp");
	
	//Работа через CMD
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.Вставить("ИмяФайлаПотокаВывода", ИмяФайлаПотокаВывода);
	ПараметрыЗапускаПрограммы.Вставить("ИмяФайлаПотокаОшибок", ИмяФайлаПотокаОшибок);
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(КомандаЗапуска);
	МассивПараметров.Добавить(ПараметрыЗапускаПрограммы);
	УникальныйИдентификаторФонового = ФоновыеЗадания.Выполнить("ЗапускПриложенийЧерезCMD.ЗапускПриложения", МассивПараметров).УникальныйИдентификатор;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыводЛоговНаСервере(ИмяФайлаПотокаВывода, Логи, ВыводитьПолноценныйЛог)
	
	
	РаботаСЛогами = Обработки.РаботаСЛогами.Создать();
	
	//Работа через Shell
	
	//ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФонового);
	//Если ФоновоеЗадание <> Неопределено Тогда
	//	
	//	МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	//	
	//	Если МассивСообщений.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Логи = РаботаСЛогами.УстановитьТекстЛогов(МассивСообщений[МассивСообщений.ВГраница()].Текст)
	//		.РазложитьСтроки()
	//		.ПодменаТекста()
	//		.РазвернутьТекст()
	//		.СложитьСтроки()
	//		.ПолучитьТекстЛога();
	//
	//КонецЕсли;
	
	//Работа через CMD
	Логи = РаботаСЛогами.УстановитьФайлЛогов(ИмяФайлаПотокаВывода)
		.УстановитьДанныеФайлаВЛог()
		.РазложитьСтроки()
		.ПодменаТекста(ВыводитьПолноценныйЛог)
		.РазвернутьТекст()
		.СложитьСтроки()
		.ПолучитьТекстЛога();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыводЛогов() Экспорт
	
	//Shell
	//ВыводЛоговНаСервере(УникальныйИдентификаторФонового, Логи);
	
	//CMD
	ВыводЛоговНаСервере(ИмяФайлаПотокаВывода, Логи, ВыводитьПолноценныйЛог);
	
	Если СтрНайти(Логи, "Обработка завершена") > 0 Тогда
		УдалитьВременныйФайл(ИмяФайлаПотокаВывода);
		ОтключитьОбработчикОжидания("ВыводЛогов");
	КонецЕсли;
	
	//ДанныеОВыполнении = ПолучитьИзВременногоХранилища(АдресХранилища); 

	//Если ТипЗнч(ДанныеОВыполнении) = Тип("Структура") Тогда
	//			
	//	Если ДанныеОВыполнении.ЗапускЗавершен Тогда
	//		
	//		ОтключитьОбработчикОжидания("ВыводЛогов");
	//		Возврат;
	//	
	//	КонецЕсли;
	//КонецЕсли;
			
КонецПроцедуры

Процедура УдалитьВременныйФайл(ИмяФайлаПотокаВывода)
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаПотокаВывода);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазвернутыйВывод(ТекстВывода)
	
	Возврат ЗапускПриложенийЧерезShell.РазвернутыйВывод(ТекстВывода);

КонецФункции	

&НаСервере
Процедура ПолучитьВеткиНаСервере(ПоказыватьЗавершенныеЗадачи)
	
	ТаблицаЗадач = РаботаСGit.ТаблицаВетокРепозитория(НастройкиПользователя, ПоказыватьЗавершенныеЗадачи);	
	СписокЗадачи.Загрузить(ТаблицаЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаВетку(Команда)
	
	Если Элементы.Задачи.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Получите и выберите задачу в списке.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Задача = Элементы.Задачи.ТекущиеДанные.Задача;
	КомандаЗапуска = КомандаЗапускаПерейтиНаВетку(Задача, НастройкиПользователя, База);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновныеОперации;
	ЗапускПриложения(КомандаЗапуска);
		
	ИнициализироватьЗначенияФормы();
	
КонецПроцедуры

&НаСервере
Функция КомандаЗапускаПерейтиНаВетку(Задача, НастройкиПользователя, База)

	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(Задача);
	ПараметрыБазы = Справочники.Базы.НастройкиБазы(База);
	КомандаЗапуска = РаботаСGit.НовыйКомандаПереходаНаВетку(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи);

	Возврат КомандаЗапуска;
	
КонецФункции	

&НаСервере
Функция КомандаЗапускаПерейтиНаВеткуТолькоОбработки(Задача, НастройкиПользователя, База)

	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(Задача);
	ПараметрыБазы = Справочники.Базы.НастройкиБазы(База);
	ПараметрыБазы.ДорабатыватьКонфигурацию = Ложь;
	КомандаЗапуска = РаботаСGit.НовыйКомандаПереходаНаВетку(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи);

	Возврат КомандаЗапуска;
	
КонецФункции	

&НаСервереБезКонтекста
Функция КомандаЗапускаЗафиксироватьИзменения(ТекущаяЗадача, НастройкиПользователя, База, ДополнительныеПараметры)

	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(ТекущаяЗадача);
	ПараметрыБазы = Справочники.Базы.НастройкиБазы(База);
	КомандаЗапуска = РаботаСGit.НовыйКомандаФиксацияИзменений(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи,
		ДополнительныеПараметры);

	Возврат КомандаЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьИзмененияПослеВводаКоммита(ТекстКоммита)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстКоммита", ТекстКоммита);
	
	КомандаЗапуска = КомандаЗапускаЗафиксироватьИзменения(ТекущаяЗадача, НастройкиПользователя, База,
		ДополнительныеПараметры);
		
	ЗапускПриложения(КомандаЗапуска);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновныеОперации;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяЗадачаНаСервере(НастройкиПользователя, НомерНовойЗадачи)
	Возврат Справочники.Задачи.НоваяЗадача(НастройкиПользователя, НомерНовойЗадачи);
КонецФункции

&НаКлиенте
Процедура ПослеСозданияНовойЗадачи(Результат, Параметры) Экспорт
	ИнициализироватьЗначенияФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадач(ПоказыватьЗавершенныеЗадачи)
	
	СписокЗадачи.Очистить();
	ПолучитьВеткиНаСервере(ПоказыватьЗавершенныеЗадачи);	

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ИнициализироватьЗначенияФормы();
КонецПроцедуры

#КонецОбласти