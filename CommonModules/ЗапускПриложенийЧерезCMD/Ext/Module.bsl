#Область ПрограммныйИнтерфейс

Процедура ЗапускПриложения(КомандаЗапуска, ПараметрыЗапускаПрограммы) Экспорт
	
	СтрокаКоманды = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска);
	ЗаписьЖурналаРегистрации("GIT",,,, СтрокаКоманды);

	ТекущийКаталог = ПараметрыЗапускаПрограммы.ТекущийКаталог;
	ДождатьсяЗавершения = ПараметрыЗапускаПрограммы.ДождатьсяЗавершения;
	ПолучитьПотокВывода = ПараметрыЗапускаПрограммы.ПолучитьПотокВывода;
	ПолучитьПотокОшибок = ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок;
	КодировкаПотоков = ПараметрыЗапускаПрограммы.КодировкаПотоков;
	КодировкаИсполнения = ПараметрыЗапускаПрограммы.КодировкаИсполнения;
	
	ИмяФайлаПотокаВывода = ПараметрыЗапускаПрограммы.ИмяФайлаПотокаВывода;
	ИмяФайлаПотокаОшибок = ПараметрыЗапускаПрограммы.ИмяФайлаПотокаОшибок;

	
	Если ДождатьсяЗавершения Тогда 
		Если ПолучитьПотокВывода Тогда 
			СтрокаКоманды = СтрокаКоманды + " > """ + ИмяФайлаПотокаВывода + """";
		КонецЕсли;
		
		Если ПолучитьПотокОшибок Тогда 
			СтрокаКоманды = СтрокаКоманды + " 2>""" + ИмяФайлаПотокаОшибок + """";
		КонецЕсли;
	КонецЕсли;
	
	Если КодировкаПотоков = Неопределено Тогда 
		КодировкаПотоков = "CP866";
	КонецЕсли;
	
	КодВозврата = Неопределено;
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		
		СтрокаКоманды = ОбщегоНазначенияСлужебныйКлиентСервер.СтрокаЗапускаКомандыWindows(
			СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодировкаИсполнения);
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			// В файловой информационной базе показывать окно консоли не следует и в серверном контексте.
			Оболочка = Новый COMОбъект("Wscript.Shell");
			КодВозврата = Оболочка.Run(СтрокаКоманды, 0, ДождатьсяЗавершения);
			Оболочка = Неопределено;
		Иначе
			ЗапуститьПриложение(СтрокаКоманды,, ДождатьсяЗавершения, КодВозврата);
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначения.ЭтоLinuxСервер() И ЗначениеЗаполнено(КодировкаИсполнения) Тогда
			СтрокаКоманды = "LANGUAGE=" + КодировкаИсполнения + " " + СтрокаКоманды;
		КонецЕсли;
		
		ЗапуститьПриложение(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата);
	КонецЕсли;
	
	ПотокВывода = "";
	ПотокОшибок = "";
	
	Если ДождатьсяЗавершения Тогда 
		Если ПолучитьПотокВывода Тогда
			ПотокВывода = ФайловаяСистема.ПрочитатьФайлЕслиСуществует(ИмяФайлаПотокаВывода, КодировкаПотоков);
			//УдалитьВременныйФайл(ИмяФайлаПотокаВывода);
		КонецЕсли;
		
		Если ПолучитьПотокОшибок Тогда 
			ПотокОшибок = ПрочитатьФайлЕслиСуществует(ИмяФайлаПотокаОшибок, КодировкаПотоков);
			//УдалитьВременныйФайл(ИмяФайлаПотокаОшибок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьФайлЕслиСуществует(Путь, Кодировка)
	
	Результат = Неопределено;
	ФайлИнфо = Новый Файл(Путь);
	
	Если ФайлИнфо.Существует() Тогда 
		
		ЧтениеПотокаОшибок = Новый ЧтениеТекста(Путь, Кодировка);
		Результат = ЧтениеПотокаОшибок.Прочитать();
		ЧтениеПотокаОшибок.Закрыть();
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда 
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиЛог(ИмяФайлаЛога, Адрес)

	ТекущаяСтрока = 0;	
	ИмяФайлаКопия  = ПолучитьИмяВременногоФайла("log");
	КопироватьФайл(ИмяФайлаЛога, ИмяФайлаКопия);
	
	ВыбФайл = Новый Файл(ИмяФайлаКопия);
	
	Если ВыбФайл.Существует() Тогда
		
		Текст = Новый ТекстовыйДокумент;
		
		Текст.Прочитать(ИмяФайлаКопия, "UTF-8");
		ТекстЛогов = Текст.ПолучитьТекст(); 
	Иначе
		Сообщить("Файл не найден!");
	КонецЕсли; 

	//	Если ТекущаяСтрока = 0 Тогда
	//		ТекущаяСтрока = 1;
	//	КонецЕсли;
	//	Если ТекущаяСтрока = Текст.КоличествоСтрок() Тогда
	//		Возврат;	
	//	КонецЕсли; 
	//	
	//	Для НомерСтроки = ТекущаяСтрока по Текст.КоличествоСтрок() Цикл
	//		
	//		СтрокаЛогов = Текст.ПолучитьСтроку(НомерСтроки);
	//		ТекущаяСтрока = НомерСтроки;
	//
	//		Если НомерСтроки <> 1 
	//			И СтрокаЛогов = Текст.ПолучитьСтроку(НомерСтроки-1) Тогда
	//			Продолжить;	
	//		КонецЕсли;
	//		Если СтрДлина(СтрокаЛогов) > 120  Тогда
	//			СтрокаЛогов = Лев(СтрокаЛогов, 120) + Символы.ПС + "    " + Сред(СтрокаЛогов, 120);
	//		КонецЕсли;
	//		
	//		ВыводЛогов = СтрокаЛогов + Символы.ПС + ВыводЛогов;
	//	
	//	КонецЦикла;
	//	
	//	ПоместитьВоВременноеХранилище(
	//		Новый Структура("ВыводИнформация, ВыводОшибки, ЗапускЗавершен",
	//		ВыводЛогов, ВыводЛогов, Ложь),
	//		Адрес);
		
	
КонецПроцедуры

#КонецОбласти
